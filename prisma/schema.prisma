generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id                  String     @id @default(cuid())
  name                String?
  email               String?    @unique
  emailVerified       DateTime?
  username            String?    @unique
  image               String?
  bio                 String?
  iqScore             Int?
  iqTestDate          DateTime?
  password            String? // Added for credentials provider

  createdAt           DateTime   @default(now())
  updatedAt           DateTime   @updatedAt

  accounts            Account[]
  sessions            Session[]
  posts               Post[]
  comments            Comment[]
  likes               Like[]
  iqTestSubmissions   IQTestSubmission[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  postId    String
  post      Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model IQTestSubmission {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  score       Int
  submittedAt DateTime   @default(now())
  duration    Int? // Optional: if you want to track how long it took
}

model Post {
  id          String     @id @default(cuid())
  title       String     @db.VarChar(69)
  content     String     @db.VarChar(420)
  createdAt   DateTime   @default(now())
  views       Int        @default(0)
  likesCount  Int        @default(0) // Renamed to avoid conflict
  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments    Comment[]
  likes       Like[] // This is the relation to the Like model
}

model Comment {
  id          String     @id @default(cuid())
  content     String
  createdAt   DateTime   @default(now())

  authorId    String
  author      User       @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId      String
  post        Post       @relation(fields: [postId], references: [id], onDelete: Cascade)
}
